name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore: 
      - 'docs/**'
  pull_request:
    types: [labeled, synchronize]  
    branches: [ main ]
    paths-ignore: 
      - 'docs/**'
  workflow_dispatch:
      inputs:
        run_checks:
          description: 'ExÃ©cuter les analyses et tests'
          required: true
          type: boolean
          default: false
  schedule:
    - cron: '0 8 * * 1'
env:
  QA_APP_NAME: stapp-vue2048-qa
  PROD_APP_NAME: stapp-vue2048-prod
  ARTIFACT_RETENTION_DAYS: ${{ github.ref == 'refs/heads/main' && 7 || 1 }}


jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - run: corepack enable
      - run: pnpm config set store-dir .pnpm-store
      - run: pnpm install
      - uses: actions/cache@v3
        with:
          path: |
            .pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/cache@v3
        with:
          path: |
            .pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm build
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}


  test:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_checks) }}
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/cache@v3
        with:
          path: |
            .pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm lint
      - run: pnpm test
      - run: pnpm type-check

  deploy-qa:
    needs: build
    if: github.event_name == 'workflow_dispatch' # DÃ©ploiement manuel seulement
    runs-on: ubuntu-latest
    environment:
      name: qa
      url: https://${{ env.QA_APP_NAME }}.azurewebsites.net
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN_QA }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"  
          api_location: ""    
          output_location: ""  

  deploy-prod:
    needs: build
    if: github.event_name == 'workflow_dispatch' # DÃ©ploiement manuel seulement
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ env.PROD_APP_NAME }}.azurewebsites.net
    steps:
      - uses: actions/download-artifact@v4 
        with:
          name: dist
          path: dist/
      - uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN_PROD }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"  
          api_location: ""    
          output_location: "" 
  create-pr-environment:
    needs: [build]
    if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy-preview') }}
    runs-on: ubuntu-latest
    environment: pr-preview
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Create Static Web App environment
        uses: azure/CLI@v1
        id: create-env
        with:
          inlineScript: |
            az extension add --name static-web-apps --yes
            PR_NUMBER=${{ github.event.pull_request.number }}
            ENV_NAME="preview-pr-$PR_NUMBER"
            
            # Create environment
            az staticwebapp environment create \
              --name ${{ env.QA_APP_NAME }} \
              --environment-name $ENV_NAME \
              --branch "pr-$PR_NUMBER"
            
            # Deploy application
            az staticwebapp deploy \
              --name ${{ env.QA_APP_NAME }} \
              --environment-name $ENV_NAME \
              --source ./dist
            
            # Get environment URL
            URL=$(az staticwebapp show --name ${{ env.QA_APP_NAME }} --query "defaultHostname" -o tsv)
            echo "PR_ENV_URL=https://$ENV_NAME-$URL" >> $GITHUB_OUTPUT
      
      - name: Post PR comment with preview link
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸŒŽ Environnement de prÃ©visualisation dÃ©ployÃ© : ${{ steps.create-env.outputs.PR_ENV_URL }}`
            })

  cleanup-pr-environment:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Delete Static Web App environment
        uses: azure/CLI@v1
        with:
          inlineScript: |
            PR_NUMBER=${{ github.event.pull_request.number }}
            ENV_NAME="preview-pr-$PR_NUMBER"
            az staticwebapp environment delete \
              --name ${{ env.QA_APP_NAME }} \
              --environment-name $ENV_NAME \
              --yes

